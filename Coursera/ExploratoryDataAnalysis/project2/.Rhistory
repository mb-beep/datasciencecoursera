SCC <- readRDS("./data/Source_Classification_Code.rds");
names(NEI) <- tolower(names(NEI));
names(SCC) <- tolower(names(SCC));
# Get indices of coal combustions-related resources using grepl
#  and get (unique) names of sectors
ind <- grepl("fuel comb(.*)coal", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
# Use individual names of coal combustion resources (industrial, institutional and electrical)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instInd <- NEI$scc %in% inst;
instTmp <- NEI[instInd,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emission));
names(inst) <- c("year", "emissions");
# Extract industrial emission sources
ind <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
indInd <- NEI$scc %in% ind;
indTmp <- NEI[indInd,];
ind <- ddply(indTmp, .(year), function(x) sum(x$emission));
names(ind) <- c("year", "emissions");
# Extract electric sources
elec <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
indElec <- NEI$scc %in% elec;
elecTmp <- NEI[indElec,];
elec <- ddply(elecTmp, .(year), function(x) sum(x$emission));
names(elec) <- c("year", "emissions");
# Recombine individual sources
dfList <- list(inst, ind, elec);
# Melt to reorder to a new 'data.frame' for easy plotting with ggplot2
meltSrcs <- melt(dfList, id = "year");
# 'dcast' to order appropriately
castSrcs <- dcast(meltSrcs, year ~ L1);
# Rename properly
names(castSrcs) <- c("year", "institutional", "industrial", "electrical");
# Plot using base system
png("./figures/plot4.png", bg = "transparent");
matplot(castSrcs$year, castSrcs[,2:4], type = "l", lty = 1, lwd = 2, xlab = "Year", ylab = "Total emissions in tons");
legend("topright", legend = c("Institutional", "Industrial", "Electrical"), col = c("black", "red", "green"), lty = "solid");
dev.off();
getwd()
url = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip";
if(!file.exists("./data/summarySCC_PM25.rds") || !file.exists("./data/Source_Classification_Code.rds")) {
download.file(url, destfile = "./data/NEI_data.zip");
unzip("./data/NEI_data.zip", exdir = "./data");
file.remove("./data/NEI_data.zip");
}
# Read in extracted data using 'readRDS()' function.
# Modify variable names for easy access.
NEI <- readRDS("./data/summarySCC_PM25.rds");
SCC <- readRDS("./data/Source_Classification_Code.rds");
names(NEI) <- tolower(names(NEI));
names(SCC) <- tolower(names(SCC));
SCC$ei.sector
ind <- grepl("mobile.?", SCC$ei.sector, ignore.case = T);
sum(ind)
test <- as.character(unique(SCC[ind, "ei.sector"]));
test
ind <- grepl("(mobile.?vehicle)|(mobile.?gasoline)|(mobile.?diesel)", SCC$ei.sector, ignore.case = T);
test <- as.character(unique(SCC[ind, "ei.sector"]));
test;
ind <- grepl("(mobile.?vehicle)||(mobile.?gasoline)||(mobile.?diesel)", SCC$ei.sector, ignore.case = T);
sum(ind)
ind <- grepl("mobile.?vehicle|mobile.?gasoline|mobile.?diesel", SCC$ei.sector, ignore.case = T);
test <- as.character(unique(SCC[ind, "ei.sector"]));
test;
sum(ind)
ind <- grepl("mobile(.?)vehicle|mobile(.?)gasoline|mobile(.?)diesel", SCC$ei.sector, ignore.case = T);
test <- as.character(unique(SCC[ind, "ei.sector"]));
sum(ind)
ind <- grepl("mobile(.?)vehilces", SCC$ei.sector, ignore.case = T);
sum(ind)
ind <- grepl("mobile(.*)vehilces", SCC$ei.sector, ignore.case = T);
sum(ind)
ind <- grepl("mobile(.*)vehicles", SCC$ei.sector, ignore.case = T);
test <- as.character(unique(SCC[ind, "ei.sector"]));
test;
help(ifelse)
n <- merge(x=NEI, y=SCC, by = "scc")
n <- merge(x=NEI, y=SCC, by = "scc")
mergedData = n
extrData <- mergedData[ind,];
extrData <- extrData[extrData$fips == "24510",];
help(aggregate)
aggData <- aggregate(year ~ emissions, extrData, sum);
aggData
aggData <- aggregate(extrData, by = c("year", "emissions"), sum);
aggData <- aggregate(extrData, by = list("year", "emissions"), sum);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
ind <- grepl("mobile(.*)vehicles", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
emissionSrcs;
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instInd <- NEI$scc %in% inst;
instTmp <- NEI[instInd,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emissions));
names(inst) <- c("year", "emissions");
# Extract industrial emission sources
ind <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
indInd <- NEI$scc %in% ind;
indTmp <- NEI[indInd,];
ind <- ddply(indTmp, .(year), function(x) sum(x$emissions));
names(ind) <- c("year", "emissions");
# Extract electric sources
elec <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
indElec <- NEI$scc %in% elec;
elecTmp <- NEI[indElec,];
elec <- ddply(elecTmp, .(year), function(x) sum(x$emissions));
names(elec) <- c("year", "emissions");
inst
ind
elec
# Get indices of coal combustions-related resources using grepl
#  and get (unique) names of sectors
ind <- grepl("fuel comb(.*)coal", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
# Use individual names of coal combustion resources (industrial, institutional and electrical)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instInd <- NEI$scc %in% inst;
instTmp <- NEI[instInd,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emissions));
names(inst) <- c("year", "emissions");
# Extract industrial emission sources
ind <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
indInd <- NEI$scc %in% ind;
indTmp <- NEI[indInd,];
ind <- ddply(indTmp, .(year), function(x) sum(x$emissions));
names(ind) <- c("year", "emissions");
# Extract electric sources
elec <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
indElec <- NEI$scc %in% elec;
elecTmp <- NEI[indElec,];
elec <- ddply(elecTmp, .(year), function(x) sum(x$emissions));
names(elec) <- c("year", "emissions");
# Recombine individual sources
dfList <- list(inst, ind, elec);
# Melt to reorder to a new 'data.frame' for easy plotting with ggplot2
meltSrcs <- melt(dfList, id = "year");
# 'dcast' to order appropriately
castSrcs <- dcast(meltSrcs, year ~ L1);
# Rename properly
names(castSrcs) <- c("year", "institutional", "industrial", "electrical");
# Plot using base system
png("./figures/plot4.png", bg = "transparent");
matplot(castSrcs$year, castSrcs[,2:4], type = "l", lty = 1, lwd = 2, xlab = "Year", ylab = "Total emissions in tons");
legend("topright", legend = c("Institutional", "Industrial", "Electrical"), col = c("black", "red", "green"), lty = "solid");
dev.off();
getwd()
inst
ind
elec
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instInd <- NEI$scc %in% inst;
instTmp <- NEI[instInd,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emissions));
names(inst) <- c("year", "emissions");
inst
ind <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
indInd <- NEI$scc %in% ind;
indTmp <- NEI[indInd,];
ind <- ddply(indTmp, .(year), function(x) sum(x$emissions));
names(ind) <- c("year", "emissions");
# Extract electric sources
elec <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
indElec <- NEI$scc %in% elec;
elecTmp <- NEI[indElec,];
elec <- ddply(elecTmp, .(year), function(x) sum(x$emissions));
names(elec) <- c("year", "emissions");
elec
names(NEI) <- tolower(names(NEI));
names(SCC) <- tolower(names(SCC));
# Get indices of coal combustions-related resources using grepl
#  and get (unique) names of sectors
ind <- grepl("fuel comb(.*)coal", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
# Use individual names of coal combustion resources (industrial, institutional and electrical)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instInd <- NEI$scc %in% inst;
instTmp <- NEI[instInd,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emissions));
names(inst) <- c("year", "emissions");
# Extract industrial emission sources
ind <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
indInd <- NEI$scc %in% ind;
indTmp <- NEI[indInd,];
ind <- ddply(indTmp, .(year), function(x) sum(x$emissions));
names(ind) <- c("year", "emissions");
# Extract electric sources
elec <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
indElec <- NEI$scc %in% elec;
elecTmp <- NEI[indElec,];
elec <- ddply(elecTmp, .(year), function(x) sum(x$emissions));
names(elec) <- c("year", "emissions");
# Recombine individual sources
dfList <- list(inst, ind, elec);
# Melt to reorder to a new 'data.frame' for easy plotting with ggplot2
meltSrcs <- melt(dfList, id = "year");
# 'dcast' to order appropriately
castSrcs <- dcast(meltSrcs, year ~ L1);
# Rename properly
names(castSrcs) <- c("year", "institutional", "industrial", "electrical");
# Plot using base system
png("./figures/plot4.png", bg = "transparent");
matplot(castSrcs$year, castSrcs[,2:4], type = "l", lty = 1, lwd = 2, xlab = "Year", ylab = "Total emissions in tons");
legend("topright", legend = c("Institutional", "Industrial", "Electrical"), col = c("black", "red", "green"), lty = "solid");
dev.off();
# Script for completing project 2 of the Coursera
#  'Exploratory Data Analysis' course.
# Plots the needed 'plot4.png'
# Download if not done already and extract
url = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip";
if(!file.exists("./data/summarySCC_PM25.rds") || !file.exists("./data/Source_Classification_Code.rds")) {
download.file(url, destfile = "./data/NEI_data.zip");
unzip("./data/NEI_data.zip", exdir = "./data");
file.remove("./data/NEI_data.zip");
}
# Read in extracted data using 'readRDS()' function.
# Modify variable names for easy access.
NEI <- readRDS("./data/summarySCC_PM25.rds");
SCC <- readRDS("./data/Source_Classification_Code.rds");
names(NEI) <- tolower(names(NEI));
names(SCC) <- tolower(names(SCC));
# Get indices of coal combustions-related resources using grepl
#  and get (unique) names of sectors
ind <- grepl("fuel comb(.*)coal", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
# Use individual names of coal combustion resources (industrial, institutional and electrical)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instInd <- NEI$scc %in% inst;
instTmp <- NEI[instInd,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emissions));
names(inst) <- c("year", "emissions");
# Extract industrial emission sources
ind <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
indInd <- NEI$scc %in% ind;
indTmp <- NEI[indInd,];
ind <- ddply(indTmp, .(year), function(x) sum(x$emissions));
names(ind) <- c("year", "emissions");
# Extract electric sources
elec <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
indElec <- NEI$scc %in% elec;
elecTmp <- NEI[indElec,];
elec <- ddply(elecTmp, .(year), function(x) sum(x$emissions));
names(elec) <- c("year", "emissions");
# Recombine individual sources
dfList <- list(inst, ind, elec);
# Melt to reorder to a new 'data.frame' for easy plotting with ggplot2
meltSrcs <- melt(dfList, id = "year");
# 'dcast' to order appropriately
castSrcs <- dcast(meltSrcs, year ~ L1);
# Rename properly
names(castSrcs) <- c("year", "institutional", "industrial", "electrical");
# Plot using base system
png("./figures/plot4.png", bg = "transparent");
matplot(castSrcs$year, castSrcs[,2:4], type = "l", lty = 1, lwd = 2, xlab = "Year", ylab = "Total emissions in tons");
legend("topright", legend = c("Institutional", "Industrial", "Electrical"), col = c("black", "red", "green"), lty = "solid");
dev.off();
ind <- grepl("fuel comb(.*)coal", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instInd <- NEI$scc %in% inst;
instTmp <- NEI[instInd,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emissions));
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instInd <- NEI$scc %in% inst;
instTmp <- NEI[instInd,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emissions));
names(inst) <- c("year", "emissions");
ind <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
indInd <- NEI$scc %in% ind;
indTmp <- NEI[indInd,];
ind <- ddply(indTmp, .(year), function(x) sum(x$emissions));
names(ind) <- c("year", "emissions");
# Extract electric sources
elec <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
indElec <- NEI$scc %in% elec;
elecTmp <- NEI[indElec,];
elec <- ddply(elecTmp, .(year), function(x) sum(x$emissions));
names(elec) <- c("year", "emissions");
dfList <- list(inst, ind, elec);
meltSrcs <- melt(dfList, id = "year");
# 'dcast' to order appropriately
castSrcs <- dcast(meltSrcs, year ~ L1);
# Rename properly
names(castSrcs) <- c("year", "institutional", "industrial", "electrical");
png("./figures/plot4.png", bg = "transparent");
matplot(castSrcs$year, castSrcs[,2:4], type = "l", lty = 1, lwd = 2, xlab = "Year", ylab = "Total emissions in tons");
legend("topright", legend = c("Institutional", "Industrial", "Electrical"), col = c("black", "red", "green"), lty = "solid");
dev.off();
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDind <- NEI$scc %in% hDiesel;
hDTmp <- NEI[hDind,];
heavyDiesel <- ddply(hDTmp, .(year), function(x) sum(x$emissions));
names(heavyDiesel) <- c("year", "emissions");
heavyDiesel
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDiesel
sum(hDiesel)
emissionSrcs;
ind <- grepl("mobile(.*)vehicles", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
emissionSrcs;
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDind <- NEI$scc %in% hDiesel;
hDTmp <- NEI[hDind,];
hDTmp <- NEI[NEI$scc %in% hDiesel,];
names(NEI) <- tolower(names(NEI));
names(SCC) <- tolower(names(SCC));
# Get indices of coal combustions-related resources using grepl
#  and get (unique) names of sectors
ind <- grepl("fuel comb(.*)coal", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
# Use individual names of coal combustion resources (industrial, institutional and electrical)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
instTmp <- NEI[NEI$scc %in% inst,];
inst <- ddply(instTmp, .(year), function(x) sum(x$emissions));
names(inst) <- c("year", "emissions");
# Extract industrial emission sources
ind <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
indTmp <- NEI[NEI$scc %in% ind,];
ind <- ddply(indTmp, .(year), function(x) sum(x$emissions));
names(ind) <- c("year", "emissions");
# Extract electric sources
elec <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
elecTmp <- NEI[NEI$scc %in% elec,];
elec <- ddply(elecTmp, .(year), function(x) sum(x$emissions));
names(elec) <- c("year", "emissions");
# Recombine individual sources
dfList <- list(inst, ind, elec);
# Melt to reorder to a new 'data.frame' for easy plotting with ggplot2
meltSrcs <- melt(dfList, id = "year");
# 'dcast' to order appropriately
castSrcs <- dcast(meltSrcs, year ~ L1);
# Rename properly
names(castSrcs) <- c("year", "institutional", "industrial", "electrical");
# Plot using base system
png("./figures/plot4.png", bg = "transparent");
matplot(castSrcs$year, castSrcs[,2:4], type = "l", lty = 1, lwd = 2, xlab = "Year", ylab = "Total emissions in tons");
legend("topright", legend = c("Institutional", "Industrial", "Electrical"), col = c("black", "red", "green"), lty = "solid");
dev.off();
ind <- grepl("mobile(.*)vehicles", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
emissionSrcs;
# Use individual names of motor vehicle emissions (Gasoline, Diesel (Light/Heavy) Duty Vehicles)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDTmp <- NEI[NEI$scc %in% hDiesel,];
heavyDiesel <- ddply(hDTmp, .(year), function(x) sum(x$emissions));
names(heavyDiesel) <- c("year", "emissions");
lDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
lDTmp <- NEI[NEI$scc %in% hDiesel,];
lightDiesel <- ddply(lDTmp, .(year), function(x) sum(x$emissions));
names(ind) <- c("year", "emissions");
names(NEI) <- tolower(names(NEI));
names(SCC) <- tolower(names(SCC));
# Get indices of emissions from motor vehicle sources using grepl
#  and get (unique) names them.
ind <- grepl("mobile(.*)vehicles", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
emissionSrcs;
# Use individual names of motor vehicle emissions (Gasoline, Diesel (Light/Heavy) Duty Vehicles)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
# Extract heavy diesel
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDTmp <- NEI[NEI$scc %in% hDiesel,];
heavyDiesel <- ddply(hDTmp, .(year), function(x) sum(x$emissions));
names(heavyDiesel) <- c("year", "emissions");
# Extract light diesel
lDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
lDTmp <- NEI[NEI$scc %in% hDiesel,];
lightDiesel <- ddply(lDTmp, .(year), function(x) sum(x$emissions));
names(lightDiesel) <- c("year", "emissions");
# Extract heavy gasoline
hGasoline <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
hGTmp <- NEI[NEI$scc %in% hGasoline,];
heavyGasoline <- ddply(hGTmp, .(year), function(x) sum(x$emissions));
names(heavyGasoline) <- c("year", "emissions");
# Extract light gasoline
lGasoline <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
lGTmp <- NEI[NEI$scc %in% lGasoline,];
lightGasoline <- ddply(lGTmp, .(year), function(x) sum(x$emissions));
names(lightGasoline) <- c("year", "emissions");
dfList <- list(lightDiesel, heavyDiesel, lightGasoline, heavyGasoline);
dfList <- list(lightDiesel, heavyDiesel, lightGasoline, heavyGasoline);
# Melt to reorder to a new 'data.frame' for easy plotting
meltSrcs <- melt(dfList, id = "year");
meltSrcs
castSrcs <- dcast(meltSrcs, year ~ L1);
names(castSrcs) <- c("year", "lightDiesel", "heavyDiesel", "lightGasoline", "heavyGasoline");
castSrcs
matplot(castSrcs,type="l")
ind <- grepl("mobile(.*)vehicles", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
emissionSrcs;
# Use individual names of motor vehicle emissions (Gasoline, Diesel (Light/Heavy) Duty Vehicles)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
# Extract heavy diesel
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDTmp <- NEI[NEI$scc %in% hDiesel,];
heavyDiesel <- ddply(hDTmp, .(year), function(x) sum(x$emissions));
names(heavyDiesel) <- c("year", "emissions");
# Extract light diesel
lDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
lDTmp <- NEI[NEI$scc %in% lDiesel,];
lightDiesel <- ddply(lDTmp, .(year), function(x) sum(x$emissions));
names(lightDiesel) <- c("year", "emissions");
# Extract heavy gasoline
hGasoline <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
hGTmp <- NEI[NEI$scc %in% hGasoline,];
heavyGasoline <- ddply(hGTmp, .(year), function(x) sum(x$emissions));
names(heavyGasoline) <- c("year", "emissions");
# Extract light gasoline
lGasoline <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
lGTmp <- NEI[NEI$scc %in% lGasoline,];
lightGasoline <- ddply(lGTmp, .(year), function(x) sum(x$emissions));
names(lightGasoline) <- c("year", "emissions");
# Recombine individual sources
dfList <- list(lightDiesel, heavyDiesel, lightGasoline, heavyGasoline);
# Melt to reorder to a new 'data.frame' for easy plotting
meltSrcs <- melt(dfList, id = "year");
# 'dcast' to order appropriately
castSrcs <- dcast(meltSrcs, year ~ L1);
# Rename properly
names(castSrcs) <- c("year", "lightDiesel", "heavyDiesel", "lightGasoline", "heavyGasoline");
matplot(castSrcs)
matplot(castSrcs,type="l")
castSrcs
help(ddply)
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDTmp <- NEI[NEI$scc %in% hDiesel,];
heavyDiesel <- ddply(hDTmp, year, function(x) sum(x$emissions));
names(heavyDiesel) <- c("year", "emissions");
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDTmp <- NEI[NEI$scc %in% hDiesel,];
heavyDiesel <- ddply(hDTmp, "year", function(x) sum(x$emissions));
names(heavyDiesel) <- c("year", "emissions");
# Extract light gasoline
# Script for completing project 2 of the Coursera
#  'Exploratory Data Analysis' course.
# Plots the needed 'plot5.png'
# Download if not done already and extract
url = "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip";
if(!file.exists("./data/summarySCC_PM25.rds") || !file.exists("./data/Source_Classification_Code.rds")) {
download.file(url, destfile = "./data/NEI_data.zip");
unzip("./data/NEI_data.zip", exdir = "./data");
file.remove("./data/NEI_data.zip");
}
# Read in extracted data using 'readRDS()' function.
# Modify variable names for easy access and merge.
NEI <- readRDS("./data/summarySCC_PM25.rds");
SCC <- readRDS("./data/Source_Classification_Code.rds");
names(NEI) <- tolower(names(NEI));
names(SCC) <- tolower(names(SCC));
# Get indices of emissions from motor vehicle sources using grepl
#  and get (unique) names them.
ind <- grepl("mobile(.*)vehicles", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
emissionSrcs;
# Use individual names of motor vehicle emissions (Gasoline, Diesel (Light/Heavy) Duty Vehicles)
#  to get 'SCC' values in 'SCC' data set. Use this values to get indices in 'NEI' data set and extract data.
# Lastly, summarize data using 'ddply'.
# Extract heavy diesel
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDTmp <- NEI[NEI$scc %in% hDiesel,];
heavyDiesel <- ddply(hDTmp, .(year), function(x) sum(x$emissions));
names(heavyDiesel) <- c("year", "emissions");
# Extract light diesel
lDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[3], "scc"]);
lDTmp <- NEI[NEI$scc %in% lDiesel,];
lightDiesel <- ddply(lDTmp, .(year), function(x) sum(x$emissions));
names(lightDiesel) <- c("year", "emissions");
# Extract heavy gasoline
hGasoline <- as.character(SCC[SCC$ei.sector == emissionSrcs[2], "scc"]);
hGTmp <- NEI[NEI$scc %in% hGasoline,];
heavyGasoline <- ddply(hGTmp, .(year), function(x) sum(x$emissions));
names(heavyGasoline) <- c("year", "emissions");
# Extract light gasoline
lGasoline <- as.character(SCC[SCC$ei.sector == emissionSrcs[1], "scc"]);
lGTmp <- NEI[NEI$scc %in% lGasoline,];
lightGasoline <- ddply(lGTmp, .(year), function(x) sum(x$emissions));
names(lightGasoline) <- c("year", "emissions");
# Recombine individual sources
dfList <- list(lightDiesel, heavyDiesel, lightGasoline, heavyGasoline);
# Melt to reorder to a new 'data.frame' for easy plotting
meltSrcs <- melt(dfList, id = "year");
# 'dcast' to order appropriately
castSrcs <- dcast(meltSrcs, year ~ L1);
# Rename properly
names(castSrcs) <- c("year", "lightDiesel", "heavyDiesel", "lightGasoline", "heavyGasoline");
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDTmp <- NEI[NEI$scc %in% hDiesel,];
heavyDiesel <- ddply(hDTmp, .(year), sum = sum(emissions));
names(heavyDiesel) <- c("year", "emissions");
hDiesel <- as.character(SCC[SCC$ei.sector == emissionSrcs[4], "scc"]);
hDTmp <- NEI[NEI$scc %in% hDiesel,];
heavyDiesel <- ddply(hDTmp, .(year), function(x) sum(x$emissions));
names(heavyDiesel) <- c("year", "emissions");
ind <- grepl("fuel comb(.*)coal", SCC$ei.sector, ignore.case = T);
emissionSrcs <- as.character(unique(SCC[ind, "ei.sector"]));
inst <- as.character(SCC[SCC$ei.sector == emissionSrcs, "scc"]);
emissionSrcs
